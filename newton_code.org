#+TITLE: Newton_code
#+PROPERTY: header-args:jupyter-python :session newton :exports results :eval never-export
#+HTML_HEAD: <link rel="stylesheet" href="style/style.css">
#+STARTUP: inlineimages

#+begin_src jupyter-python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
import sys
import  importlib
#+end_src

#+RESULTS:


* Fractal
#+begin_src jupyter-python

# A list of colors to distinguish the roots.
colors = ['b', 'r', 'g', 'y']

TOL = 1.e-8

def newton(z0, f, fprime, MAX_IT=1000):
    """The Newton-Raphson method applied to f(z).

    Returns the root found, starting with an initial guess, z0, or False
    if no convergence to tolerance TOL was reached within MAX_IT iterations.

    """

    z = z0
    for i in range(MAX_IT):
        dz = f(z)/fprime(z)
        if abs(dz) < TOL:
            return z
        z -= dz
    return False

def plot_newton_fractal(f, fprime, n=200, domain=(-2, 2, -2, 2)):
    """Plot a Newton Fractal by finding the roots of f(z).

    The domain used for the fractal image is the region of the complex plane
    (xmin, xmax, ymin, ymax) where z = x + iy, discretized into n values along
    each axis.

    """

    roots = []
    m = np.zeros((n, n))

    def get_root_index(roots, r):
        """Get the index of r in the list roots.

        If r is not in roots, append it to the list.

        """

        try:
            return np.where(np.isclose(roots, r, atol=TOL))[0][0]
        except IndexError:
            roots.append(r)
            return len(roots) - 1

    xmin, xmax, ymin, ymax = domain
    for ix, x in enumerate(np.linspace(xmin, xmax, n)):
        for iy, y in enumerate(np.linspace(ymin, ymax, n)):
            z0 = x + y*1j
            r = newton(z0, f, fprime)
            if r is not False:
                ir = get_root_index(roots, r)
                m[iy, ix] = ir
    nroots = len(roots)
    if nroots > len(colors):
        # Use a "continuous" colormap if there are too many roots.
        cmap = 'hsv'
    else:
        # Use a list of colors for the colormap: one for each root.
        cmap = ListedColormap(colors[:nroots])
    plt.imshow(m, cmap=cmap, origin='lower')
    plt.axis('off')
    return m
#+end_src

#+RESULTS:


#+begin_src jupyter-python
from opt_parameters import *
g = df
dg = ddf
m = plot_newton_fractal(g, dg,domain=(-2, 2, -2, 2), n=200)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/2b303470f0f62def32310acbe333f802067beb59.png]]

#+begin_src jupyter-python
np.save(open("newton_fractal.np", "wb"), m)
np.load(open("newton_fractal.np", "rb")).shape
#+end_src

#+RESULTS:
| 200 | 200 |


* Gradient descent steps

** Gradinet descent
#+begin_src jupyter-python
from opt_parameters import *
x0 = 1.
xk = x0
xks = [['xk', 'f(xk)'], [xstar, f(xstar)]]
alpha = 1.
for _ in range(10):
    xk = xk - alpha * df(xk)
    xks.append([xk, f(xk)])
xks
#+end_src

#+RESULTS:
|                 xk |              f(xk) |
| 1.2599210498948732 |  0.622023685031538 |
|                1.2 |            0.62368 |
|             1.2544 | 0.6220381588147404 |
|    1.2596354629632 | 0.6220237238661482 |
| 1.2599074059099007 | 0.6220236851201898 |
| 1.2599204008548333 | 0.6220236850317387 |
| 1.2599210190266201 | 0.6220236850315385 |
| 1.2599210484267978 |  0.622023685031538 |
| 1.2599210498250524 |  0.622023685031538 |
| 1.2599210498915525 |  0.622023685031538 |
| 1.2599210498947153 |  0.622023685031538 |

** Newton Step
#+begin_src jupyter-python
xk = x0
xks_newton = [['xk', 'f(xk)', 'f(xk)', "lognorm(xk - x)"], [xstar, f(xstar), df(xstar), 0]]
for _ in range(50):
    xk = xk - df(xk) / ddf(xk)
    xks_newton.append([xk, f(xk), df(xk), int(np.log(abs(xk - xstar)))])
xks_newton
#+end_src

#+RESULTS:
|                 xk |              f(xk) |                   f(xk) | lognorm(xk - x) |
| 1.2599210498948732 |  0.622023685031538 |                     0.0 |               0 |
|                1.1 |           0.633205 |    -0.13379999999999992 |              -1 |
| 1.1552892561983472 | 0.6269546031675228 |    -0.09160864201243979 |              -2 |
| 1.1896074940966224 | 0.6242917413255198 |     -0.0633015865784865 |              -2 |
|  1.211972922260283 | 0.6230910135501629 |    -0.04395183927679245 |              -3 |
| 1.2269339429769213 | 0.6225328980545765 |    -0.03060285064596586 |              -3 |
|  1.237098524992524 | 0.6222687508839713 |   -0.021345726261572873 |              -3 |
| 1.2440723711378148 | 0.6221423023803252 |   -0.014905841125915708 |              -4 |
| 1.2488878025552996 | 0.6220813188430325 |   -0.010416757642193497 |              -4 |
|  1.252227104698476 | 0.6220517611541038 |  -0.0072833671393893965 |              -4 |
|  1.254549499265515 | 0.6220373866681728 |  -0.0050943021478486285 |              -5 |
| 1.2561678740429496 | 0.6220303799154699 |   -0.003564039153597864 |              -5 |
| 1.2572971942683455 | 0.6220269590771264 |   -0.002493865876559598 |              -5 |
| 1.2580859948176488 | 0.6220252871122038 |   -0.001745236636486247 |              -6 |
| 1.2586373147193777 | 0.6220244692982362 |   -0.001221436172139123 |              -6 |
| 1.2590228282056206 | 0.6220240690645606 |  -0.0008548930733422999 |              -7 |
|  1.259292487002969 |  0.622023873119476 |  -0.0005983702168559813 |              -7 |
| 1.2594811500084109 | 0.6220237771643925 |  -0.0004188322567063807 |              -7 |
| 1.2596131660729608 | 0.6220237301662738 |  -0.0002931694089093995 |              -8 |
| 1.2597055537979356 | 0.6220237071440059 |  -0.0002052121352282832 |              -8 |
|  1.259770213687034 | 0.6220236958654292 | -0.00014364533458288697 |              -8 |
| 1.2598154699676285 | 0.6220236903397269 | -0.00010055018608485788 |              -9 |
| 1.2598471466003411 | 0.6220236876324073 |  -7.038437178699119e-05 |              -9 |
|  1.259869318889288 | 0.6220236863059149 |  -4.926868863632805e-05 |              -9 |
| 1.2598848388282042 | 0.6220236856559659 | -3.4487899967050593e-05 |             -10 |
| 1.2598957024604367 | 0.6220236853375019 |   -2.41414407629037e-05 |             -10 |
| 1.2599033068437557 | 0.6220236851814583 | -1.6898964820599716e-05 |             -10 |
| 1.2599086298340532 | 0.6220236851049983 | -1.1829253955397689e-05 |             -11 |
|   1.25991235588903 | 0.6220236850675334 |  -8.280467273680258e-06 |             -11 |
| 1.2599149641087808 | 0.6220236850491757 | -5.7963219490364535e-06 |             -12 |
| 1.2599167898534274 | 0.6220236850401805 |  -4.057422844505609e-06 |             -12 |
| 1.2599180678701822 | 0.6220236850357728 | -2.8401947565370735e-06 |             -12 |
|  1.259918962479707 | 0.6220236850336132 |  -1.988135724584339e-06 |             -13 |
| 1.2599195887052943 | 0.6220236850325548 | -1.3916947107617262e-06 |             -13 |
| 1.2599200270626763 | 0.6220236850320362 |  -9.741861523693274e-07 |             -13 |
| 1.2599203339125844 | 0.6220236850317822 |  -6.819302354799106e-07 |             -14 |
|  1.259920548707393 | 0.6220236850316577 |  -4.773511300459887e-07 |             -14 |
| 1.2599206990636969 | 0.6220236850315967 |  -3.341457739391984e-07 |             -14 |
|  1.259920804313079 | 0.6220236850315668 | -2.3390203347517512e-07 |             -15 |
| 1.2599208779876316 | 0.6220236850315521 |  -1.637314192670658e-07 |             -15 |
|  1.259920929559811 | 0.6220236850315449 | -1.1461199154183532e-07 |             -15 |
| 1.2599209656603332 | 0.6220236850315415 |   -8.02283930845249e-08 |             -16 |
|  1.259920990930697 | 0.6220236850315397 |  -5.615987457296967e-08 |             -16 |
| 1.2599210086199506 | 0.6220236850315388 |  -3.931191199235684e-08 |             -17 |
| 1.2599210210024279 | 0.6220236850315384 |  -2.751833818592786e-08 |             -17 |
| 1.2599210296701617 | 0.6220236850315383 | -1.9262836614686307e-08 |             -17 |
| 1.2599210357375752 | 0.6220236850315382 | -1.3483985661366659e-08 |             -18 |
| 1.2599210399847647 |  0.622023685031538 |  -9.438789927429524e-09 |             -18 |
| 1.2599210429577972 |  0.622023685031538 |  -6.607153002491373e-09 |             -18 |
|   1.25992104503892 |  0.622023685031538 | -4.6250070884212844e-09 |             -19 |
|  1.259921046495706 |  0.622023685031538 | -3.2375048863997337e-09 |             -19 |
