#+TITLE: Newton_code
#+PROPERTY: header-args:jupyter-python :session newton :exports results :eval never-export
#+HTML_HEAD: <link rel="stylesheet" href="style/style.css">
#+STARTUP: inlineimages

#+begin_src jupyter-python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
import sys
import  importlib
PROJECT_DIR = '/home/bachir/Dropbox/Job_Applications/Academia/Application_Fall_2020/Application_By_School/UCLouvain/Presentations/newton/manim/'
sys.path.append(PROJECT_DIR)
#+end_src

#+RESULTS:


* Fractal
#+begin_src jupyter-python

# A list of colors to distinguish the roots.
colors = ['b', 'r', 'g', 'y']

TOL = 1.e-8

def newton(z0, f, fprime, MAX_IT=1000):
    """The Newton-Raphson method applied to f(z).

    Returns the root found, starting with an initial guess, z0, or False
    if no convergence to tolerance TOL was reached within MAX_IT iterations.

    """

    z = z0
    for i in range(MAX_IT):
        dz = f(z)/fprime(z)
        if abs(dz) < TOL:
            return z
        z -= dz
    return False

def plot_newton_fractal(f, fprime, n=200, domain=(-2, 2, -2, 2)):
    """Plot a Newton Fractal by finding the roots of f(z).

    The domain used for the fractal image is the region of the complex plane
    (xmin, xmax, ymin, ymax) where z = x + iy, discretized into n values along
    each axis.

    """

    roots = []
    m = np.zeros((n, n))

    def get_root_index(roots, r):
        """Get the index of r in the list roots.

        If r is not in roots, append it to the list.

        """

        try:
            return np.where(np.isclose(roots, r, atol=TOL))[0][0]
        except IndexError:
            roots.append(r)
            return len(roots) - 1

    xmin, xmax, ymin, ymax = domain
    for ix, x in enumerate(np.linspace(xmin, xmax, n)):
        for iy, y in enumerate(np.linspace(ymin, ymax, n)):
            z0 = x + y*1j
            r = newton(z0, f, fprime)
            if r is not False:
                ir = get_root_index(roots, r)
                m[iy, ix] = ir
    nroots = len(roots)
    if nroots > len(colors):
        # Use a "continuous" colormap if there are too many roots.
        cmap = 'hsv'
    else:
        # Use a list of colors for the colormap: one for each root.
        cmap = ListedColormap(colors[:nroots])
    plt.imshow(m, cmap=cmap, origin='lower')
    plt.axis('off')
    return m
#+end_src

#+RESULTS:


#+begin_src jupyter-python
from opt_parameters import *
g = df
dg = ddf
m = plot_newton_fractal(g, dg, n=100)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/242a093b34938a4eea883f1512d12d5ce34e760c.png]]

#+begin_src jupyter-python
np.save(open("newton_fractal.np", "wb"), m)
np.load(open("newton_fractal.np", "rb")).shape
#+end_src

#+RESULTS:
| 100 | 100 |


* Gradient descent steps

** Gradinet descent
#+begin_src jupyter-python
from opt_parameters import *
x0 = 1.
xk = x0
xks = [['xk', 'f(xk)'], [xstar, f(xstar)]]
alpha = 1.
for _ in range(10):
    xk = xk - alpha * df(xk)
    xks.append([xk, f(xk)])
xks
#+end_src

#+RESULTS:
|                 xk |              f(xk) |
| 1.2599210498948732 |  0.622023685031538 |
|                1.2 |            0.62368 |
|             1.2544 | 0.6220381588147404 |
|    1.2596354629632 | 0.6220237238661482 |
| 1.2599074059099007 | 0.6220236851201898 |
| 1.2599204008548333 | 0.6220236850317387 |
| 1.2599210190266201 | 0.6220236850315385 |
| 1.2599210484267978 |  0.622023685031538 |
| 1.2599210498250524 |  0.622023685031538 |
| 1.2599210498915525 |  0.622023685031538 |
| 1.2599210498947153 |  0.622023685031538 |

** Newton Step
#+begin_src jupyter-python
xk = x0
xks_newton = [['xk', 'f(xk)'], [xstar, f(xstar)]]
for _ in range(10):
    xk = xk - df(xk) / ddf(xk)
    xks_newton.append([xk, f(xk)])
xks_newton
#+end_src

#+RESULTS:
|                 xk |              f(xk) |
| 1.2599210498948732 |  0.622023685031538 |
|               0.35 |       0.8607503125 |
| 1.9476530612244902 | 0.9404149148292252 |
|  1.805611566769896 | 0.8092113764068785 |
| 1.6863957164013341 | 0.7298387513780945 |
| 1.5880813510681857 | 0.6827922592063901 |
| 1.5085752823573109 | 0.6555330285354205 |
| 1.4455989626035115 | 0.6401144973087942 |
|   1.39674400293916 | 0.6316017316696982 |
| 1.3595867150584446 | 0.6270084967162032 |
| 1.3318252806984963 | 0.6245808624265965 |
